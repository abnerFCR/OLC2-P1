/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,14],$V2=[1,15],$V3=[1,17],$V4=[1,26],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,21],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[2,5,18,19,20,21,25,26,28,29,31,35,36,37,41,43,55],$Ve=[1,39],$Vf=[1,47],$Vg=[1,55],$Vh=[1,61],$Vi=[1,63],$Vj=[1,52],$Vk=[1,53],$Vl=[1,56],$Vm=[1,57],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,65],$Vr=[15,46],$Vs=[1,85],$Vt=[1,86],$Vu=[1,79],$Vv=[1,80],$Vw=[1,81],$Vx=[1,82],$Vy=[1,83],$Vz=[1,84],$VA=[1,87],$VB=[1,88],$VC=[1,89],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[15,20,24,42,44,45,46,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[2,5,18,19,20,21,25,26,28,29,31,34,35,36,37,41,43,55],$VN=[15,20,24,42,46,64,65,66,71,72,74,75,76,77,78,79],$VO=[15,20,24,42,46,64,65,66,67,68,70,71,72,74,75,76,77,78,79],$VP=[15,20,30,46],$VQ=[1,144],$VR=[15,20,24,42,46,64,71,72,74,75,76,77,78,79],$VS=[15,20,24,42,46,64,71,72,78,79],$VT=[15,20,24,42,44,45,46,63,64,65,66,67,68,69,70,71,72,74,75,76,77,78,79,87],$VU=[1,157],$VV=[1,158],$VW=[20,46],$VX=[1,166],$VY=[20,41,43],$VZ=[1,180];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,"IfSt":10,"WhileSt":11,"DoWhileSt":12,"SwitchSt":13,"IncreDecre":14,";":15,"DefinicionTypes":16,"GraficarTs":17,"BREAK":18,"CONTINUE":19,"}":20,"CONSOLELOG":21,"(":22,"Expr":23,")":24,"GRAFICAR_TS":25,"LET":26,"ListaDeclaraciones":27,"CONST":28,"ID":29,"=":30,"IF":31,"Statement":32,"ElseSt":33,"ELSE":34,"WHILE":35,"DO":36,"SWITCH":37,"{":38,"ListaCasos":39,"Caso":40,"CASE":41,":":42,"DEFAULT":43,"++":44,"--":45,",":46,"ElementoDeclaracion":47,"TipoNormal":48,"ListaValoresTipo":49,"NULL":50,"ValorType":51,"TIPOSTRING":52,"TIPOBOOLEAN":53,"TIPONUMBER":54,"TYPE":55,"ListaDefiniciones":56,"DefinicionAtributo":57,"DeclaracionArreglos":58,"Tipos":59,"ListaDimensiones":60,"TIPO":61,"ValoresArreglo":62,"[":63,"]":64,"+":65,"-":66,"*":67,"/":68,"^":69,"%":70,"||":71,"&&":72,"!":73,">=":74,"<=":75,">":76,"<":77,"==":78,"!=":79,"F":80,"DECIMAL":81,"NUMBER":82,"STRING":83,"TRUE":84,"FALSE":85,"Accesos":86,".":87,"Parametros":88,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:";",18:"BREAK",19:"CONTINUE",20:"}",21:"CONSOLELOG",22:"(",24:")",25:"GRAFICAR_TS",26:"LET",28:"CONST",29:"ID",30:"=",31:"IF",34:"ELSE",35:"WHILE",36:"DO",37:"SWITCH",38:"{",41:"CASE",42:":",43:"DEFAULT",44:"++",45:"--",46:",",50:"NULL",52:"TIPOSTRING",53:"TIPOBOOLEAN",54:"TIPONUMBER",55:"TYPE",61:"TIPO",62:"ValoresArreglo",63:"[",64:"]",65:"+",66:"-",67:"*",68:"/",69:"^",70:"%",71:"||",72:"&&",73:"!",74:">=",75:"<=",76:">",77:"<",78:"==",79:"!=",81:"DECIMAL",82:"NUMBER",83:"STRING",84:"TRUE",85:"FALSE",87:".",88:"Parametros"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[7,5],[17,3],[8,3],[8,3],[9,4],[10,6],[33,2],[33,2],[33,0],[11,5],[12,7],[13,7],[39,2],[39,1],[40,4],[40,3],[40,4],[40,3],[14,2],[14,2],[32,3],[32,2],[27,3],[27,1],[47,5],[47,3],[47,3],[47,1],[47,3],[47,7],[47,5],[49,3],[49,1],[51,3],[51,5],[48,1],[48,1],[48,1],[16,6],[56,3],[56,1],[57,3],[57,3],[58,6],[58,5],[58,5],[58,8],[58,7],[58,5],[60,3],[60,6],[60,0],[59,1],[59,1],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,2],[23,2],[23,3],[23,3],[23,2],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,1],[80,3],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[86,3],[86,4],[86,6],[86,3],[86,4],[86,6]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 30:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 24: case 25: case 70: case 71:

        this.$=$$[$0];
    
break;
case 11: case 12:

        this.$=$$[$0-1];
    
break;
case 13:

        this.$ =$$[$0-1];
    
break;
case 14:

        this.$ =new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15:

        this.$ =new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 16: case 17:

        //console.log("Error vino"+yytext+" vino "+ _$[$0-1].first_line+" "+  _$[$0-1].first_column, " se esperaba "+ (this.terminals_[symbol] || symbol));
        //console.log($$[$0-1]);
        error = new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Sintactico', 'Error Sintactico: " ' + $$[$0-1] + ' ",  no se esperaba');
        errores.push(error);
        this.$="asdf";
    
break;
case 18:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 19:

        this.$ = new GraficarTs(_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 20:

        this.$= new Declaracion('let', $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 21:

        this.$ = new Declaracion('const',$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 22:

        this.$ = new Asignacion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 23:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 26:

        this.$=null;    
    
break;
case 27:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 28:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 29:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 31: case 41: case 50: case 58:

        this.$=[$$[$0]];
    
break;
case 32: case 34:

        this.$ = new Caso($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 33: case 35:

        this.$ = new Caso(null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 36:
   
        this.$ = new IncreDecre('incre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 37:

        this.$ = new IncreDecre('decre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 38:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 39:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 40: case 49:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 42:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR,$$[$0-4],$$[$0-2],'',$$[$0]);
    
break;
case 43: case 60:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],$$[$0],'',null);
    
break;
case 44:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_VALOR,$$[$0-2],'',null,$$[$0]);
    
break;
case 45:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID,$$[$0], null, '',null);
    
break;
case 46:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2], Tipo.TYPE, $$[$0], null);
    
break;
case 47:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-6], Tipo.TYPE, $$[$0-4], $$[$0-1]);
    
break;
case 48:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-4], Tipo.TYPE, $$[$0-2], new Literal('null', _$[$0-4].first_line, _$[$0-4].first_column,4));
    
break;
case 51:

        this.$={id:$$[$0-2], valor:$$[$0]};
    
break;
case 52:

        this.$ = {id:$$[$0-4], valor:$$[$0-1]}
    
break;
case 53:

        this.$=Tipo.STRING;
    
break;
case 54:

        this.$=Tipo.BOOLEAN;
    
break;
case 55:

        this.$=Tipo.NUMBER;
    
break;
case 56:

        this.$ = new DeclaracionType($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 57:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 59:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],Tipo.TYPE,$$[$0],null);
    
break;
case 61:

        this.$ = new DeclaracionArreglo($$[$0-4], $$[$0-2], $$[$0-1],null,_$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 62:

        this.$= new DeclaracionArreglo();
    
break;
case 67:

        this.$=new Simbolo(new Arreglo([$$[$0-2]],), '', Tipo.ARRAY, '');
    
break;
case 68:

        this.$=new Simbolo(new Arreglo(null, $$[$0-2]), $$[$0-4], Tipo.ARRAY, 'let');
    
break;
case 72:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 73:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 74:
 
        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 75:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 76:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 77:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 78:

        this.$ = new Aritmetica($$[$0], $$[$0], OperacionAritmetica.NEGACION, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 79:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.INCREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 80:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.DECREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 81:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 82:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 83:
 
        this.$ = new Relacional($$[$0], $$[$0], OperacionRelacional.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 84:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 85:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 86:

        
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 87:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 88:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.IGUALACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 89:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.DIFERENCIACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 90:

        
        this.$ = $$[$0];
    
break;
case 91:
 
        this.$ = $$[$0-1];
    
break;
case 92:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 93:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 94:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 95:

        this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
        
    
break;
case 96:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 97:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 98:

        this.$ = $$[$0];
    
break;
case 99:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,4);
    
break;
case 100:

        this.$ = new AccesoTipo($$[$0],'', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 101: case 102: case 104: case 105:


    
break;
case 103:

        this.$ =  new AccesoTipo($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc},{1:[3]},{2:$V0,5:[1,27],6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc},o($Vd,[2,3]),o($Vd,[2,4]),o($Vd,[2,5]),o($Vd,[2,6]),o($Vd,[2,7]),o($Vd,[2,8]),o($Vd,[2,9]),o($Vd,[2,10]),{15:[1,29]},{15:[1,30]},{15:[1,31]},{15:[1,32]},{15:[1,33]},{15:[1,34],20:[1,35]},{22:[1,36]},{27:37,29:$Ve,47:38},{27:40,29:$Ve,47:38},{30:[1,41],44:[1,42],45:[1,43]},{22:[1,44]},{22:[1,45]},{32:46,38:$Vf},{22:[1,48]},{29:[1,49]},{22:[1,50]},{1:[2,1]},o($Vd,[2,2]),o($Vd,[2,11]),o($Vd,[2,12]),o($Vd,[2,13]),o($Vd,[2,14]),o($Vd,[2,15]),o($Vd,[2,16]),o($Vd,[2,17]),{22:$Vg,23:51,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{15:[1,64],46:$Vq},o($Vr,[2,41]),o($Vr,[2,45],{30:[1,67],42:[1,66]}),{15:[1,68],46:$Vq},{22:$Vg,23:69,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{15:[2,36]},{15:[2,37]},{22:$Vg,23:70,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:71,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{35:[1,72]},{2:$V0,4:73,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:[1,74],21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc},{22:$Vg,23:75,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{30:[1,76]},{24:[1,77]},{24:[1,78],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{22:$Vg,23:95,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:96,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($VI,[2,90]),{22:$Vg,23:97,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($VI,[2,92]),o($VI,[2,93]),o($VI,[2,94]),o($VI,[2,95]),o($VI,[2,96]),o($VI,[2,97],{63:[1,99],87:[1,98]}),o($VI,[2,98],{63:[1,101],87:[1,100]}),o($VI,[2,99]),o($Vd,[2,20]),{29:$Ve,47:102},{29:[1,104],48:103,52:$VJ,53:$VK,54:$VL},{22:$Vg,23:108,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($Vd,[2,21]),{15:[1,109],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{24:[1,110],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{24:[1,111],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{22:[1,112]},{2:$V0,6:28,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,20:[1,113],21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc},o($VM,[2,39]),{24:[1,114],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{38:[1,115]},{15:[2,19]},{15:[1,116]},{22:$Vg,23:117,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:118,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:119,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:120,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:121,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:122,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($VI,[2,79]),o($VI,[2,80]),{22:$Vg,23:123,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:124,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:125,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:126,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:127,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:128,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:129,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{22:$Vg,23:130,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($VN,[2,78],{44:$Vs,45:$Vt,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VO,[2,83],{44:$Vs,45:$Vt,69:$Vy}),{24:[1,131],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{29:[1,132]},{22:$Vg,23:133,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{29:[1,134]},{22:$Vg,23:135,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($Vr,[2,40]),o($Vr,[2,43],{30:[1,136]}),o($Vr,[2,46],{30:[1,137]}),o($VP,[2,53]),o($VP,[2,54]),o($VP,[2,55]),o($Vr,[2,44],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($Vd,[2,22]),{32:138,38:$Vf},{32:139,38:$Vf},{22:$Vg,23:140,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},o($VM,[2,38]),{38:[1,141]},{29:$VQ,56:142,57:143},o($Vd,[2,18]),o($VN,[2,72],{44:$Vs,45:$Vt,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VN,[2,73],{44:$Vs,45:$Vt,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VO,[2,74],{44:$Vs,45:$Vt,69:$Vy}),o($VO,[2,75],{44:$Vs,45:$Vt,69:$Vy}),o($VO,[2,76],{44:$Vs,45:$Vt,69:$Vy}),o($VO,[2,77],{44:$Vs,45:$Vt,69:$Vy}),o([15,20,24,42,46,64,71],[2,81],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o([15,20,24,42,46,64,71,72],[2,82],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),o($VR,[2,84],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VR,[2,85],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VR,[2,86],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VR,[2,87],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz}),o($VS,[2,88],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VC,75:$VD,76:$VE,77:$VF}),o($VS,[2,89],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,74:$VC,75:$VD,76:$VE,77:$VF}),o($VI,[2,91]),o($VT,[2,103],{22:[1,145]}),{44:$Vs,45:$Vt,64:[1,146],65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},o($VT,[2,100],{22:[1,147]}),{44:$Vs,45:$Vt,64:[1,148],65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{22:$Vg,23:149,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{38:[1,150],50:[1,151]},o($Vd,[2,26],{33:152,34:[1,153]}),o($Vd,[2,27]),{24:[1,154],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{39:155,40:156,41:$VU,43:$VV},{20:[1,159],46:[1,160]},o($VW,[2,58]),{42:[1,161]},{88:[1,162]},o($VT,[2,104]),{88:[1,163]},o($VT,[2,101]),o($Vr,[2,42],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{29:$VX,49:164,51:165},o($Vr,[2,48]),o($Vd,[2,23]),{10:168,31:$V8,32:167,38:$Vf},{15:[1,169]},{20:[1,170],40:171,41:$VU,43:$VV},o($VY,[2,31]),{22:$Vg,23:172,29:$Vh,50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{42:[1,173]},{15:[2,56]},{29:$VQ,57:174},{29:[1,175],48:176,52:$VJ,53:$VK,54:$VL},{24:[1,177]},{24:[1,178]},{20:[1,179],46:$VZ},o($VW,[2,50]),{42:[1,181]},o($Vd,[2,24]),o($Vd,[2,25]),o($Vd,[2,28]),o($Vd,[2,29]),o($VY,[2,30]),{42:[1,182],44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH},{2:$V0,4:184,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,32:183,35:$V9,36:$Va,37:$Vb,38:$Vf,55:$Vc},o($VW,[2,57]),o($VW,[2,59]),o($VW,[2,60]),o($VT,[2,105]),o($VT,[2,102]),o($Vr,[2,47]),{29:$VX,51:185},{22:$Vg,23:186,29:$Vh,38:[1,187],50:$Vi,66:$Vj,73:$Vk,80:54,81:$Vl,82:$Vm,83:$Vn,84:$Vo,85:$Vp,86:62},{2:$V0,4:189,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,32:188,35:$V9,36:$Va,37:$Vb,38:$Vf,55:$Vc},o($VY,[2,33]),o($VY,[2,35],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,6:28,2:$V0,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc}),o($VW,[2,49]),o($VW,[2,51],{44:$Vs,45:$Vt,65:$Vu,66:$Vv,67:$Vw,68:$Vx,69:$Vy,70:$Vz,71:$VA,72:$VB,74:$VC,75:$VD,76:$VE,77:$VF,78:$VG,79:$VH}),{29:$VX,49:190,51:165},o($VY,[2,32]),o($VY,[2,34],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,16:12,17:13,6:28,2:$V0,18:$V1,19:$V2,21:$V3,25:$V4,26:$V5,28:$V6,29:$V7,31:$V8,35:$V9,36:$Va,37:$Vb,55:$Vc}),{20:[1,191],46:$VZ},o($VW,[2,52])],
defaultActions: {27:[2,1],42:[2,36],43:[2,37],77:[2,19],159:[2,56]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Aritmetica, OperacionAritmetica } = require('../Expresion/Aritmetica');
    const { Relacional, OperacionRelacional } = require('../Expresion/Relacional');
    const { Acceso } = require('../Expresion/Acceso');
    const { AccesoTipo } = require('../Expresion/AccesoTipo');
    const { Literal} = require('../Expresion/Literal');
    const { Imprimir } =require('../Instrucciones/Imprimir');
    const { GraficarTs } =require('../Instrucciones/GraficarTs');
    const { Break } =require('../Instrucciones/Break');
    const { Continue } =require('../Instrucciones/Continue');
    const { Switch } =require('../Instrucciones/Switch');
    const { If } = require('../Instrucciones/If');
    const { While } = require('../Instrucciones/While');
    const { DoWhile } = require('../Instrucciones/DoWhile');
    const { IncreDecre } = require('../Instrucciones/IncreDecre');
    const { Statement} = require('../Instrucciones/Statement');
    const { Asignacion} = require('../Instrucciones/Asignacion');
    const { Tipo, cuadro_texto } =require("../Abstracto/Retorno");
    const { errores } =require('../Errores/Errores');
    const { Error_ } =require('../Errores/Error');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { ElementoDeclaracion, TipoDeclaracion } = require('../Util/ElementoDeclaracion');
    const { Caso } = require('../Util/Caso');
    const { DeclaracionType } = require('../Instrucciones/DeclaracionType');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 81
break;
case 4:return 82
break;
case 5:return 83
break;
case 6:return 67
break;
case 7:return 68
break;
case 8:return 15
break;
case 9:return 46
break;
case 10:return 44
break;
case 11:return 45
break;
case 12:return 66
break;
case 13:return 65
break;
case 14:return 69
break;
case 15:return 70
break;
case 16:return 75
break;
case 17:return 74
break;
case 18:return 77
break;
case 19:return 76
break;
case 20:return 78
break;
case 21:return 79
break;
case 22:return 71
break;
case 23:return 72
break;
case 24:return 73
break;
case 25:return 30
break;
case 26:return 22
break;
case 27:return 24 
break;
case 28:return 38
break;
case 29:return 20
break;
case 30:return 63
break;
case 31:return 64
break;
case 32:return 42
break;
case 33:return 87
break;
case 34:return 31
break;
case 35:return 34
break;
case 36:return 35
break;
case 37:return 84
break;
case 38:return 85
break;
case 39:return 21
break;
case 40:return 25
break;
case 41:return 36
break;
case 42:return 26
break;
case 43:return 28
break;
case 44:return 54
break;
case 45:return 52
break;
case 46:return 53
break;
case 47:return 37
break;
case 48:return 41
break;
case 49:return 43
break;
case 50:return 55
break;
case 51:return 50
break;
case 52:return 18
break;
case 53:return 19
break;
case 54:return 29;
break;
case 55:return 5
break;
case 56: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    error=new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','El caracter: " ' + yy_.yytext + ' ",  no pertenece al lenguaje');
    errores.push(error);
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^\n])*([\n]|$))/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:\.)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:do\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}