/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,14],$V2=[1,15],$V3=[1,19],$V4=[1,20],$V5=[1,34],$V6=[1,23],$V7=[1,31],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,28],$Vd=[1,33],$Ve=[1,29],$Vf=[1,30],$Vg=[2,5,18,19,23,27,31,32,43,44,45,47,48,52,53,54,56,60,61,70],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,48],$Vl=[1,61],$Vm=[1,53],$Vn=[1,60],$Vo=[1,50],$Vp=[1,51],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,65],$Vw=[1,73],$Vx=[1,77],$Vy=[10,26],$Vz=[1,96],$VA=[1,97],$VB=[1,90],$VC=[1,91],$VD=[1,92],$VE=[1,93],$VF=[1,94],$VG=[1,95],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[10,26,31,34,39,62,63,76,79,80,81,82,83,84,85,86,88,89,90,91,92,93],$VQ=[1,113],$VR=[1,114],$VS=[1,115],$VT=[1,122],$VU=[10,39],$VV=[2,62],$VW=[1,124],$VX=[10,26,39],$VY=[1,141],$VZ=[26,39,76],$V_=[10,26,31,34,39,76,79,80,85,86,88,89,90,91,92,93],$V$=[10,26,31,34,39,76,79,80,81,82,84,85,86,88,89,90,91,92,93],$V01=[10,26,31,34,39,62,63,74,76,79,80,81,82,83,84,85,86,88,89,90,91,92,93,104],$V11=[2,5,18,19,23,24,27,31,32,43,44,45,47,48,52,53,54,56,60,61,65,70,80,87,95,96,97,98,99],$V21=[1,172],$V31=[1,173],$V41=[1,174],$V51=[2,5,18,19,23,27,31,32,43,44,45,47,48,51,52,53,54,56,60,61,70],$V61=[1,188],$V71=[10,30,74],$V81=[30,74],$V91=[10,26,31,34,39,76,85,86,88,89,90,91,92,93],$Va1=[10,26,31,34,39,76,85,86,92,93],$Vb1=[2,60],$Vc1=[1,201],$Vd1=[2,63],$Ve1=[1,202],$Vf1=[10,26,30,31,39,57,74],$Vg1=[1,209],$Vh1=[1,211],$Vi1=[39,76],$Vj1=[2,27],$Vk1=[1,218],$Vl1=[1,231],$Vm1=[1,232],$Vn1=[31,39],$Vo1=[1,247],$Vp1=[31,60,61],$Vq1=[1,266],$Vr1=[1,299],$Vs1=[1,292],$Vt1=[1,293],$Vu1=[1,296],$Vv1=[1,298],$Vw1=[2,139],$Vx1=[2,18,19,23,27,31,43,44,45,47,48,52,53,54,56,70];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,";":10,"IfSt":11,"WhileSt":12,"DoWhileSt":13,"SwitchSt":14,"IncreDecre":15,"DefinicionTypes":16,"GraficarTs":17,"BREAK":18,"CONTINUE":19,"DeclaracionArreglos":20,"ForNormal":21,"Funcion":22,"ID":23,"(":24,"ListaExpr":25,")":26,"RETURN":27,"Expr":28,"AsigIndividual":29,"=":30,"}":31,"FUNCTION":32,"ListaParametros":33,":":34,"TiposFuncion":35,"StatementFuncion":36,"ElementoDeclaracion":37,"ListaParametrosPrima":38,",":39,"TipoNormal":40,"TIPOVOID":41,"TIPOARRAY":42,"CONSOLELOG":43,"GRAFICAR_TS":44,"LET":45,"ListaDeclaraciones":46,"CONST":47,"IF":48,"Statement":49,"ElseSt":50,"ELSE":51,"WHILE":52,"DO":53,"FOR":54,"OpcAsignacion":55,"SWITCH":56,"{":57,"ListaCasos":58,"Caso":59,"CASE":60,"DEFAULT":61,"++":62,"--":63,"ListaValoresTipo":64,"NULL":65,"ValorType":66,"TIPOSTRING":67,"TIPOBOOLEAN":68,"TIPONUMBER":69,"TYPE":70,"ListaDefiniciones":71,"DefinicionAtributo":72,"ListaDimensiones":73,"[":74,"ValoresArreglo":75,"]":76,"Tipos":77,"ValorArreglo":78,"+":79,"-":80,"*":81,"/":82,"^":83,"%":84,"||":85,"&&":86,"!":87,">=":88,"<=":89,">":90,"<":91,"==":92,"!=":93,"F":94,"DECIMAL":95,"NUMBER":96,"STRING":97,"TRUE":98,"FALSE":99,"NuevoAcceso":100,"Accesos":101,"Acceso":102,"FuncionArreglo":103,".":104,"POP":105,"PUSH":106,"LENGTH":107,"InstruccionesFuncion":108,"InstruccionFuncion":109,"InstruccionesFuncionPrima":110,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",18:"BREAK",19:"CONTINUE",23:"ID",24:"(",26:")",27:"RETURN",30:"=",31:"}",32:"FUNCTION",34:":",39:",",41:"TIPOVOID",42:"TIPOARRAY",43:"CONSOLELOG",44:"GRAFICAR_TS",45:"LET",47:"CONST",48:"IF",51:"ELSE",52:"WHILE",53:"DO",54:"FOR",56:"SWITCH",57:"{",60:"CASE",61:"DEFAULT",62:"++",63:"--",65:"NULL",67:"TIPOSTRING",68:"TIPOBOOLEAN",69:"TIPONUMBER",70:"TYPE",74:"[",76:"]",79:"+",80:"-",81:"*",82:"/",83:"^",84:"%",85:"||",86:"&&",87:"!",88:">=",89:"<=",90:">",91:"<",92:"==",93:"!=",95:"DECIMAL",96:"NUMBER",97:"STRING",98:"TRUE",99:"FALSE",104:".",105:"POP",106:"PUSH",107:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,5],[6,3],[6,4],[6,2],[6,2],[22,8],[33,2],[38,3],[38,0],[35,1],[35,1],[35,1],[35,1],[7,5],[17,3],[8,3],[8,3],[9,3],[11,6],[50,2],[50,2],[50,0],[12,5],[13,7],[21,8],[55,1],[55,1],[14,7],[58,2],[58,1],[59,4],[59,3],[59,4],[59,3],[15,2],[15,2],[49,3],[49,2],[46,3],[46,1],[37,5],[37,3],[37,3],[37,1],[37,3],[37,7],[37,5],[64,3],[64,1],[66,3],[66,5],[40,1],[40,1],[40,1],[16,6],[71,3],[71,1],[72,3],[72,3],[20,5],[20,5],[20,4],[20,1],[73,3],[73,6],[75,3],[75,1],[78,3],[78,3],[25,3],[25,1],[77,1],[77,1],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,2],[28,2],[28,2],[28,3],[28,3],[28,2],[28,3],[28,3],[28,3],[28,3],[28,3],[28,3],[28,1],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,4],[100,1],[100,1],[100,2],[102,1],[101,3],[101,4],[101,5],[101,3],[101,5],[101,4],[103,3],[103,4],[103,1],[29,4],[29,4],[36,3],[36,2],[108,2],[110,2],[110,0],[109,1],[109,1],[109,2],[109,1],[109,1],[109,1],[109,1],[109,2],[109,2],[109,2],[109,2],[109,2],[109,2],[109,1],[109,5],[109,4],[109,3],[109,2],[109,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2: case 47:

        $$[$0-1].push($$[$0]);
        this.$ = $$[$0-1];
    
break;
case 3:

        this.$ = [$$[$0]];
    
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 17: case 18: case 28: case 38: case 39: case 120: case 121: case 140: case 141: case 143: case 144: case 145: case 146: case 153:

        this.$=$$[$0];
    
break;
case 6: case 11: case 12: case 16: case 86: case 142: case 147: case 148: case 152:

        this.$=$$[$0-1];
    
break;
case 13: case 149:

        this.$ =$$[$0-1];
    
break;
case 14: case 150:

        this.$ =new Break(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 15: case 151:

        this.$ =new Continue(_$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 19: case 154:

        this.$ =new Llamada($$[$0-4], $$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 20: case 156:

        this.$ = new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 21: case 155:

        var s = eval('$$');
        var indice = s.length-1;
        console.log("------------------------------------------------------------------>");
        console.log(s[indice-3]);
        s[indice-3].expresionNueva = $$[$0-1];
        this.$=$$[$0-3];
    
break;
case 22:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Semantico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 23:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Semantico','El caracter: " ' + yytext + ' ",  no se esperaba');
        errores.push(error);
    
break;
case 24:

        //console.log("Soy el statement");
        //console.log($$[$0]);
        var s = eval('$$');
        var ind = s.length - 1;
        this.$ = new Funcion(s[ind - 6], s[ind -4 ], s[ind-1],s[ind], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 25:

        //console.log("Que paso");
        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice]==undefined){
            this.$ = [s[indice-1]];
        }else{
            s[indice].unshift(s[indice-1]);
            this.$ = s[indice];
        }
    
break;
case 26:

        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice] != undefined){
            s[indice].unshift(s[indice-1]);
        }else{
            s[indice] = [s[indice-1]];
        }
        this.$= s[indice]; 
    
break;
case 29:

        this.$=Tipo.VOID;
    
break;
case 30:

        this.$={tipo:Tipo.TYPE, idTipo:$$[$0]};
    
break;
case 31:

        this.$=Tipo.ARRAY;
    
break;
case 32:

        this.$ = new Imprimir($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 33:

        this.$ = new GraficarTs(_$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 34:

        this.$= new Declaracion('let', $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 35:

        this.$ = new Declaracion('const',$$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 36:

        this.$ = new Asignacion($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 37:

        this.$ = new If($$[$0-3], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 40:

        this.$=null;    
    
break;
case 41:

        this.$ = new While($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 42:

        this.$ = new DoWhile($$[$0-2], $$[$0-5], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 43:

        this.$ = new For($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
    
break;
case 44: case 117:

        this.$ = $$[$0];
    
break;
case 45:

        this.$= $$[$0];
    
break;
case 46:

        this.$ = new Switch($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column);
    
break;
case 48: case 58: case 67: case 75: case 85: case 89:

        this.$=[$$[$0]];
    
break;
case 49: case 51:

        this.$ = new Caso($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 50: case 52:

        this.$ = new Caso(null, $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 53:
   
        this.$ = new IncreDecre('incre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 54:

        this.$ = new IncreDecre('decre', new Acceso($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 55: case 135:

        this.$ = new Statement($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 56: case 136:

        this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 57: case 66:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
    
break;
case 59:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR,$$[$0-4],$$[$0-2],'',$$[$0]);
    
break;
case 60: case 77:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],$$[$0],'',null);
    
break;
case 61:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_VALOR,$$[$0-2],'',null,$$[$0]);
    
break;
case 62:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID,$$[$0], null, '',null);
    
break;
case 63:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2], Tipo.TYPE, $$[$0], null);
    
break;
case 64:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-6], Tipo.TYPE, $$[$0-4], $$[$0-1]);
    
break;
case 65:

        this.$ =  new ElementoDeclaracion(TipoDeclaracion.ID_TIPO_VALOR, $$[$0-4], Tipo.TYPE, $$[$0-2], new Literal('null', _$[$0-4].first_line, _$[$0-4].first_column,4));
    
break;
case 68:

        this.$={id:$$[$0-2], valor:$$[$0]};
    
break;
case 69:

        this.$ = {id:$$[$0-4], valor:$$[$0-1]}
    
break;
case 70:

        this.$=Tipo.STRING;
    
break;
case 71:

        this.$=Tipo.BOOLEAN;
    
break;
case 72:

        this.$=Tipo.NUMBER;
    
break;
case 73:

        this.$ = new DeclaracionType($$[$0-4], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
    
break;
case 74: case 88:

        $$[$0-2].push($$[$0]);
        this.$=$$[$0-2];
    
break;
case 76:

        this.$ = new ElementoDeclaracion(TipoDeclaracion.ID_TIPO,$$[$0-2],Tipo.TYPE,$$[$0],null);
    
break;
case 78:

        this.$=new DeclaracionArreglo($$[$0-4], $$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 79:

        this.$=new DeclaracionArreglo($$[$0-4],$$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
    
break;
case 80:

        this.$=new DeclaracionArreglo($$[$0-3],[],_$[$0-3].first_line,_$[$0-3].first_column);
    
break;
case 81:

        this.$=new DeclaracionArreglo($$[$0],[],_$[$0].first_line,_$[$0].first_column);
    
break;
case 82:
   
        var s = eval('$$');
        var indice = s.length-1;
        console.log(s[indice-2]);
        this.$=new Simbolo(new Arreglo([$$[$0-2]],s[indice -2].valor.tipo), s[indice - 2].id, Tipo.ARRAY, s[indice-2].tipoSimbolo,s[indice-2].valor.tipo.idTipo);
    
break;
case 83:

        this.$=new Simbolo(new Arreglo([], $$[$0-2]), $$[$0-4], Tipo.ARRAY, $$[$0-5] ,$$[$0-2].idTipo);
    
break;
case 84:

        $$[$0-2].push($$[$0]);
        this.$ = $$[$0-2];
        
    
break;
case 87:
   
        this.$ = $$[$0-1];
    
break;
case 90:

        this.$={tipo:$$[$0], idTipo:''};
    
break;
case 91:

        this.$ = {tipo:Tipo.TYPE, idTipo:$$[$0]};
    
break;
case 92:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.SUMA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 93:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.RESTA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 94:
 
        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MULTIPLICACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 95:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.DIVISION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 96:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.POTENCIA, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 97:

        this.$ = new Aritmetica($$[$0-2], $$[$0], OperacionAritmetica.MODULO, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 98:

        this.$ = new Aritmetica($$[$0], $$[$0], OperacionAritmetica.NEGACION, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 99:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.INCREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 100:

        this.$ = new Aritmetica($$[$0-1], $$[$0-1], OperacionAritmetica.DECREMENTO, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 101:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.OR, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 102:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.AND, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 103:
 
        this.$ = new Relacional($$[$0], $$[$0], OperacionRelacional.NOT, _$[$0-1].first_line,_$[$0-1].first_column);
    
break;
case 104:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 105:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORIGUALQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 106:

        
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MAYORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 107:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.MENORQUE, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 108:

        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.IGUALACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 109:
 
        this.$ = new Relacional($$[$0-2], $$[$0], OperacionRelacional.DIFERENCIACION, _$[$0-2].first_line,_$[$0-2].first_column);
    
break;
case 110:

        
        this.$ = $$[$0];
    
break;
case 111:
 
        this.$ = $$[$0-1];
    
break;
case 112:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 0);
    
break;
case 113:
 
        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 1);
    
break;
case 114:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column, 2);
    
break;
case 115:

        this.$ = new Literal(true, _$[$0].first_line, _$[$0].first_column, 3);
        
    
break;
case 116:

        this.$ = new Literal(false, _$[$0].first_line, _$[$0].first_column, 3);
    
break;
case 118:

        this.$ = new Literal($$[$0], _$[$0].first_line, _$[$0].first_column,4);
    
break;
case 119:

        this.$ =new Llamada($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 122:

        this.$ = new AccesoArreglo($$[$0-1],null,null,$$[$0].funcion,$$[$0].valor, _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 123:

        this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column);
    
break;
case 124:

        this.$ = new AccesoTipo($$[$0],'', $$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 125:

        this.$ = new AccesoArreglo('',$$[$0-1],$$[$0-3],'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 126:

        this.$ = new AccesoArreglo('',$$[$0-2],$$[$0-4],$$[$0].funcion,$$[$0].valor, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 127:

        this.$ =  new AccesoTipo($$[$0-2], $$[$0], null, _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 128:

        this.$ = new AccesoArreglo($$[$0-4],$$[$0-2],null,$$[$0].funcion,$$[$0].valor, _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 129:

        this.$ = new AccesoArreglo($$[$0-3],$$[$0-1],null,'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 130:

        this.$={funcion:$$[$0-2], valor:null};
    
break;
case 131:

        this.$={funcion:$$[$0-3], valor:$$[$0-1]};
    
break;
case 132:

        this.$={funcion:$$[$0], valor:null};
    
break;
case 133:

        this.$ = new AsignacionIndArreglo('',$$[$0-1],$$[$0-3],'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 134:

        this.$ = new AsignacionIndArreglo($$[$0-3],$$[$0-1],null,'',null, _$[$0-3].first_line, _$[$0-3].first_column);
    
break;
case 137:

        //console.log("Que paso");
        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice]==undefined){
            this.$ = [s[indice-1]];
        }else{
            s[indice].unshift(s[indice-1]);
            this.$ = s[indice];
        }
        
    
break;
case 138:

        var s = eval('$$');
        var indice = s.length - 1;
        if(s[indice] != undefined){
            s[indice].unshift(s[indice-1]);
        }else{
            s[indice] = [s[indice-1]];
        }
        this.$= s[indice];  
    
break;
case 139:

    
break;
case 157:

        error=new Error_(_$[$0-1].first_line, _$[$0-1].first_column, 'Semantico','El caracter: " ' + yytext + ' ",  no se esperaba(Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
case 158:

        error=new Error_(_$[$0-1].first_line,_$[$0-1].first_column, 'Semantico','El caracter: " ' + yytext + ' ",  no se esperaba (Una instruccion no pertenece a la funcion)');
        errores.push(error);
    
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32},o($Vg,[2,3]),o($Vg,[2,4]),o($Vg,[2,5]),{10:[1,37]},o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),{10:[1,38]},{10:[1,39]},{10:[1,40]},{10:[1,41]},{10:[1,42]},{10:[1,43]},o($Vg,[2,17]),o($Vg,[2,18]),{24:[1,44],30:$Vh,62:$Vi,63:$Vj,74:$Vk},{23:$Vl,24:$Vm,28:49,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{30:[1,64],74:$Vv},{10:[1,66],31:[1,67]},{24:[1,68]},{23:[1,70],37:71,46:69},{23:$Vw,37:71,46:72},{24:[1,74]},{24:[1,75]},{49:76,57:$Vx},{24:[1,78]},{23:[1,79]},{24:[1,80]},{10:[2,81],30:[1,81],74:[1,82]},{24:[1,83]},{23:[1,84]},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,6]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{23:$Vl,24:$Vm,25:85,28:86,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:87,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($Vy,[2,53]),o($Vy,[2,54]),{23:$Vl,24:$Vm,28:88,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,89],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{23:$Vl,24:$Vm,28:106,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:107,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($VP,[2,110]),{23:$Vl,24:$Vm,28:108,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($VP,[2,112]),o($VP,[2,113]),o($VP,[2,114]),o($VP,[2,115]),o($VP,[2,116]),o($VP,[2,117]),o($VP,[2,118]),o($VP,[2,123],{103:110,24:[1,109],74:[1,112],104:[1,111],105:$VQ,106:$VR,107:$VS}),o($VP,[2,120],{74:[1,117],104:[1,116]}),o($VP,[2,121]),{23:$Vl,24:$Vm,28:118,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:119,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($Vg,[2,22]),o($Vg,[2,23]),{23:$Vl,24:$Vm,28:120,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,121],39:$VT},o($VU,$VV,{30:$VW,34:[1,123]}),o($VU,[2,58]),{10:[1,125],39:$VT},o($VX,$VV,{30:$VW,34:[1,126]}),{23:$Vl,24:$Vm,28:127,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:128,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{52:[1,129]},{2:$V0,4:130,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,31:[1,131],32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32},{23:$Vl,24:$Vm,28:132,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{30:[1,133]},{26:[1,134]},{74:[1,135]},{76:[1,136]},{8:137,45:[1,138],47:$V9},{24:[1,139]},{26:[1,140],39:$VY},o($VZ,[2,89],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o($Vy,[2,36],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),{62:$Vz,63:$VA,76:[1,142],79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vg,[2,20]),{23:$Vl,24:$Vm,28:143,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:144,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:145,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:146,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:147,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:148,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($VP,[2,99]),o($VP,[2,100]),{23:$Vl,24:$Vm,28:149,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:150,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:151,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:152,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:153,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:154,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:155,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:156,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V_,[2,98],{62:$Vz,63:$VA,81:$VD,82:$VE,83:$VF,84:$VG}),o($V$,[2,103],{62:$Vz,63:$VA,83:$VF}),{26:[1,157],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{23:$Vl,24:$Vm,25:158,28:86,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($VP,[2,122]),{23:[1,159]},{23:$Vl,24:$Vm,28:160,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{24:[1,161]},{24:[1,162]},o($V01,[2,132]),{23:[1,163]},{23:$Vl,24:$Vm,28:164,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,165],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{62:$Vz,63:$VA,76:[1,166],79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{26:[1,167],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($V11,[2,34]),{23:$Vw,37:168},{23:[1,171],40:170,67:$V21,68:$V31,69:$V41,77:169},{23:$Vl,24:$Vm,28:175,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V11,[2,35]),{23:[1,177],40:176,67:$V21,68:$V31,69:$V41},{26:[1,178],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{26:[1,179],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{24:[1,180]},{2:$V0,6:36,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,31:[1,181],32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32},o($V51,[2,56]),{26:[1,182],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{57:[1,183]},{10:[2,33]},{23:$Vl,24:$Vm,25:185,28:86,65:$Vn,74:$V61,75:184,76:[1,186],78:187,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V71,[2,82]),{23:$Vl,24:$Vm,28:189,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vw,37:71,46:69},{23:$Vw,33:190,37:191},{10:[1,192]},{23:$Vl,24:$Vm,28:193,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V81,[2,134]),o($V_,[2,92],{62:$Vz,63:$VA,81:$VD,82:$VE,83:$VF,84:$VG}),o($V_,[2,93],{62:$Vz,63:$VA,81:$VD,82:$VE,83:$VF,84:$VG}),o($V$,[2,94],{62:$Vz,63:$VA,83:$VF}),o($V$,[2,95],{62:$Vz,63:$VA,83:$VF}),o($V$,[2,96],{62:$Vz,63:$VA,83:$VF}),o($V$,[2,97],{62:$Vz,63:$VA,83:$VF}),o([10,26,31,34,39,76,85],[2,101],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o([10,26,31,34,39,76,85,86],[2,102],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o($V91,[2,104],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($V91,[2,105],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($V91,[2,106],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($V91,[2,107],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG}),o($Va1,[2,108],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,88:$VJ,89:$VK,90:$VL,91:$VM}),o($Va1,[2,109],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,88:$VJ,89:$VK,90:$VL,91:$VM}),o($VP,[2,111]),{26:[1,194],39:$VY},o($V01,[2,127]),{62:$Vz,63:$VA,76:[1,195],79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{26:[1,196]},{23:$Vl,24:$Vm,28:197,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V01,[2,124]),{62:$Vz,63:$VA,76:[1,198],79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vg,[2,21]),o($V81,[2,133]),{10:[1,199]},o($VU,[2,57]),{74:[1,200]},o($VU,$Vb1,{30:$Vc1,74:[2,90]}),o($VU,$Vd1,{30:$Ve1,74:[2,91]}),o($Vf1,[2,70]),o($Vf1,[2,71]),o($Vf1,[2,72]),o($VX,[2,61],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o($VX,$Vb1,{30:$Vc1}),o($VX,$Vd1,{30:$Ve1}),{49:203,57:$Vx},{49:204,57:$Vx},{23:$Vl,24:$Vm,28:205,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},o($V51,[2,55]),{57:[1,206]},{23:$Vg1,71:207,72:208},{39:$Vh1,76:[1,210]},{39:$VY,76:[1,212]},{10:[2,80]},o($Vi1,[2,85]),{23:$Vl,24:$Vm,25:213,28:86,65:$Vn,74:$V61,75:214,78:187,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,215],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{26:[1,216]},{26:$Vj1,38:217,39:$Vk1},o($Vg,[2,19]),o($VZ,[2,88],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),o($VP,[2,119]),o($V01,[2,129],{103:219,105:$VQ,106:$VR,107:$VS}),o($V01,[2,130]),{26:[1,220],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($V01,[2,125],{103:221,105:$VQ,106:$VR,107:$VS}),o($Vg,[2,32]),{76:[1,222]},{23:$Vl,24:$Vm,28:223,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{57:[1,224],65:[1,225]},o($Vg,[2,40],{50:226,51:[1,227]}),o($Vg,[2,41]),{26:[1,228],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{58:229,59:230,60:$Vl1,61:$Vm1},{31:[1,233],39:[1,234]},o($Vn1,[2,75]),{34:[1,235]},{10:[2,78]},{74:$V61,78:236},{10:[2,79]},{39:$VY,76:[1,237]},{39:$Vh1,76:[1,238]},{9:240,15:241,23:[1,242],55:239},{34:[1,243]},{26:[2,25]},{23:$Vw,37:244},o($V01,[2,128]),o($V01,[2,131]),o($V01,[2,126]),o($V71,[2,83]),o($VX,[2,59],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),{23:$Vo1,64:245,66:246},o($VX,[2,65]),o($Vg,[2,37]),{11:249,48:$Va,49:248,57:$Vx},{10:[1,250]},{31:[1,251],59:252,60:$Vl1,61:$Vm1},o($Vp1,[2,48]),{23:$Vl,24:$Vm,28:253,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{34:[1,254]},{10:[2,73]},{23:$Vg1,72:255},{23:[1,256],40:257,67:$V21,68:$V31,69:$V41},o($Vi1,[2,84]),o($Vi1,[2,86]),o($Vi1,[2,87]),{26:[1,258]},{26:[2,44]},{26:[2,45]},{30:$Vh,62:$Vi,63:$Vj},{23:[1,262],35:259,40:260,41:[1,261],42:[1,263],67:$V21,68:$V31,69:$V41},{26:$Vj1,38:264,39:$Vk1},{31:[1,265],39:$Vq1},o($Vn1,[2,67]),{34:[1,267]},o($Vg,[2,38]),o($Vg,[2,39]),o($Vg,[2,42]),o($Vg,[2,46]),o($Vp1,[2,47]),{34:[1,268],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},{2:$V0,4:270,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,49:269,52:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vx,70:$Vf,73:32},o($Vn1,[2,74]),o($Vn1,[2,76]),o($Vn1,[2,77]),{49:271,57:$Vx},{36:272,57:[1,273]},{57:[2,28]},{57:[2,29]},{57:[2,30]},{57:[2,31]},{26:[2,26]},o($VX,[2,64]),{23:$Vo1,66:274},{23:$Vl,24:$Vm,28:275,57:[1,276],65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{2:$V0,4:278,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V1,19:$V2,20:16,21:17,22:18,23:$V3,27:$V4,29:21,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,49:277,52:$Vb,53:$Vc,54:$Vd,56:$Ve,57:$Vx,70:$Vf,73:32},o($Vp1,[2,50]),o($Vp1,[2,52],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,29:21,73:32,6:36,2:$V0,18:$V1,19:$V2,23:$V3,27:$V4,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf}),o($Vg,[2,43]),o($Vg,[2,24]),{2:$Vr1,7:282,8:283,9:284,11:285,12:286,13:287,14:288,15:289,16:290,17:291,18:$Vs1,19:$Vt1,20:294,21:295,23:$Vu1,27:$Vv1,29:297,31:[1,280],43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32,108:279,109:281},o($Vn1,[2,66]),o($Vn1,[2,68],{62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO}),{23:$Vo1,64:300,66:246},o($Vp1,[2,49]),o($Vp1,[2,51],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,22:18,29:21,73:32,6:36,2:$V0,18:$V1,19:$V2,23:$V3,27:$V4,32:$V5,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf}),{31:[1,301]},o($Vg,[2,136]),{2:$Vr1,7:282,8:283,9:284,11:285,12:286,13:287,14:288,15:289,16:290,17:291,18:$Vs1,19:$Vt1,20:294,21:295,23:$Vu1,27:$Vv1,29:297,31:$Vw1,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32,109:303,110:302},o($Vx1,[2,140]),o($Vx1,[2,141]),{10:[1,304]},o($Vx1,[2,143]),o($Vx1,[2,144]),o($Vx1,[2,145]),o($Vx1,[2,146]),{10:[1,305]},{10:[1,306]},{10:[1,307]},{10:[1,308]},{10:[1,309]},{10:[1,310]},o($Vx1,[2,153]),{24:[1,311],30:$Vh,62:$Vi,63:$Vj,74:$Vk},{30:[1,312],74:$Vv},{23:$Vl,24:$Vm,28:313,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,314],31:[1,315]},{31:[1,316],39:$Vq1},o($Vg,[2,135]),{31:[2,137]},{2:$Vr1,7:282,8:283,9:284,11:285,12:286,13:287,14:288,15:289,16:290,17:291,18:$Vs1,19:$Vt1,20:294,21:295,23:$Vu1,27:$Vv1,29:297,31:$Vw1,43:$V6,44:$V7,45:$V8,47:$V9,48:$Va,52:$Vb,53:$Vc,54:$Vd,56:$Ve,70:$Vf,73:32,109:303,110:317},o($Vx1,[2,142]),o($Vx1,[2,147]),o($Vx1,[2,148]),o($Vx1,[2,149]),o($Vx1,[2,150]),o($Vx1,[2,151]),o($Vx1,[2,152]),{23:$Vl,24:$Vm,25:318,28:86,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{23:$Vl,24:$Vm,28:319,65:$Vn,80:$Vo,87:$Vp,94:52,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:59,101:62,102:63},{10:[1,320],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vx1,[2,157]),o($Vx1,[2,158]),o($Vn1,[2,69]),{31:[2,138]},{26:[1,321],39:$VY},{10:[1,322],62:$Vz,63:$VA,79:$VB,80:$VC,81:$VD,82:$VE,83:$VF,84:$VG,85:$VH,86:$VI,88:$VJ,89:$VK,90:$VL,91:$VM,92:$VN,93:$VO},o($Vx1,[2,156]),{10:[1,323]},o($Vx1,[2,155]),o($Vx1,[2,154])],
defaultActions: {35:[2,1],134:[2,33],186:[2,80],210:[2,78],212:[2,79],217:[2,25],233:[2,73],240:[2,44],241:[2,45],260:[2,28],261:[2,29],262:[2,30],263:[2,31],264:[2,26],302:[2,137],317:[2,138]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Aritmetica, OperacionAritmetica } = require('../Expresion/Aritmetica');
    const { Relacional, OperacionRelacional } = require('../Expresion/Relacional');
    const { Acceso } = require('../Expresion/Acceso');
    const { AccesoTipo } = require('../Expresion/AccesoTipo');
    const { AccesoArreglo } = require('../Expresion/AccesoArreglo');
    const { Literal} = require('../Expresion/Literal');
    const { Imprimir } =require('../Instrucciones/Imprimir');
    const { GraficarTs } =require('../Instrucciones/GraficarTs');
    const { Break } =require('../Instrucciones/Break');
    const { Return } =require('../Instrucciones/Return');
    const { DeclaracionArreglo } =require('../Instrucciones/DeclaracionArreglo');
    const { Continue } =require('../Instrucciones/Continue');
    const { Switch } =require('../Instrucciones/Switch');
    const { If } = require('../Instrucciones/If');
    const { While } = require('../Instrucciones/While');
    const { Arreglo } = require('../Objetos/Arreglo');
    const { Simbolo } = require('../Simbolo/Simbolo');
    const { DoWhile } = require('../Instrucciones/DoWhile');
    const { For } = require('../Instrucciones/For');
    const { IncreDecre } = require('../Instrucciones/IncreDecre');
    const { Statement} = require('../Instrucciones/Statement');
    const { Asignacion} = require('../Instrucciones/Asignacion');
    const { AsignacionIndArreglo } = require('../Instrucciones/AsignacionIndArreglo');
    const { Tipo, cuadro_texto } =require("../Abstracto/Retorno");
    const { errores } =require('../Errores/Errores');
    const { Error_ } =require('../Errores/Error');
    const { Declaracion } = require('../Instrucciones/Declaracion');
    const { Funcion } = require('../Instrucciones/Funcion');
    const { Llamada } = require('../Instrucciones/Llamada');
    const { ElementoDeclaracion, TipoDeclaracion } = require('../Util/ElementoDeclaracion');
    const { Caso } = require('../Util/Caso');
    const { DeclaracionType } = require('../Instrucciones/DeclaracionType');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 95
break;
case 4:return 96
break;
case 5:return 97
break;
case 6:return 81
break;
case 7:return 82
break;
case 8:return 10
break;
case 9:return 39
break;
case 10:return 62
break;
case 11:return 63
break;
case 12:return 80
break;
case 13:return 79
break;
case 14:return 83
break;
case 15:return 84
break;
case 16:return 89
break;
case 17:return 88
break;
case 18:return 91
break;
case 19:return 90
break;
case 20:return 92
break;
case 21:return 93
break;
case 22:return 85
break;
case 23:return 86
break;
case 24:return 87
break;
case 25:return 30
break;
case 26:return 24
break;
case 27:return 26 
break;
case 28:return 57
break;
case 29:return 31
break;
case 30:return 74
break;
case 31:return 76
break;
case 32:return 34
break;
case 33:return 48
break;
case 34:return 51
break;
case 35:return 52
break;
case 36:return 98
break;
case 37:return 99
break;
case 38:return 43
break;
case 39:return 44
break;
case 40:return 53
break;
case 41:return 45
break;
case 42:return 47
break;
case 43:return 69
break;
case 44:return 67
break;
case 45:return 68
break;
case 46:return 56
break;
case 47:return 60
break;
case 48:return 61
break;
case 49:return 70
break;
case 50:return 65
break;
case 51:return 18
break;
case 52:return 19
break;
case 53:return 54
break;
case 54:return 32
break;
case 55:return "TIPOVOID"
break;
case 56:return "RETURN"  
break;
case 57:return 106
break;
case 58:return 105
break;
case 59:return 107
break;
case 60:return 104
break;
case 61:return 23;
break;
case 62:return 5
break;
case 63: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    error=new Error_(yy_.yylloc.first_line, yy_.yylloc.first_column, 'Lexico','El caracter: " ' + yy_.yytext + ' ",  no pertenece al lenguaje');
    errores.push(error);
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^\n])*([\n]|$))/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:do\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:\.)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Grammar;
exports.Parser = Grammar.Parser;
exports.parse = function () { return Grammar.parse.apply(Grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}