/* parser2 generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser2 errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser2 (grammar) errors will also provide these members, i.e. parser2 errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser2 has a error recovery rule available for this particular error)
  }
*/
var Grammar2 = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,15],$V2=[1,18],$V3=[1,21],$V4=[1,33],$V5=[1,22],$V6=[1,30],$V7=[1,23],$V8=[1,24],$V9=[1,25],$Va=[1,26],$Vb=[1,27],$Vc=[1,32],$Vd=[1,28],$Ve=[1,29],$Vf=[5,18,19,22,30,31,42,43,44,46,47,51,52,53,55,58,60,61,70],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,47],$Vk=[1,49],$Vl=[1,64],$Vm=[1,54],$Vn=[1,63],$Vo=[1,51],$Vp=[1,52],$Vq=[1,55],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,72],$Vy=[1,76],$Vz=[10,25],$VA=[1,98],$VB=[1,99],$VC=[1,92],$VD=[1,93],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,100],$VJ=[1,101],$VK=[1,102],$VL=[1,103],$VM=[1,104],$VN=[1,105],$VO=[1,106],$VP=[1,107],$VQ=[1,108],$VR=[10,25,33,38,58,62,63,76,79,80,81,82,83,84,85,86,88,89,90,91,92,93,103],$VS=[1,116],$VT=[1,117],$VU=[1,118],$VV=[1,123],$VW=[10,38],$VX=[2,64],$VY=[1,125],$VZ=[10,25,38],$V_=[1,142],$V$=[25,38,76],$V01=[10,25,33,38,58,76,79,80,85,86,88,89,90,91,92,93,103],$V11=[10,25,33,38,58,76,79,80,81,82,84,85,86,88,89,90,91,92,93,103],$V21=[10,25,33,38,58,62,63,74,76,79,80,81,82,83,84,85,86,88,89,90,91,92,93,103,107],$V31=[5,18,19,22,23,30,31,42,43,44,46,47,51,52,53,55,58,60,61,65,70,80,87,95,96,97,98,99,100,101],$V41=[1,176],$V51=[1,177],$V61=[1,178],$V71=[5,18,19,22,30,31,42,43,44,46,47,50,51,52,53,55,58,60,61,70],$V81=[1,192],$V91=[10,28,74],$Va1=[28,74],$Vb1=[10,25,33,38,58,76,85,86,88,89,90,91,92,93,103],$Vc1=[10,25,33,38,58,76,85,86,92,93,103],$Vd1=[2,62],$Ve1=[1,207],$Vf1=[2,65],$Vg1=[1,208],$Vh1=[10,25,28,38,56,58,74],$Vi1=[1,215],$Vj1=[1,217],$Vk1=[38,76],$Vl1=[1,225],$Vm1=[2,29],$Vn1=[1,227],$Vo1=[1,241],$Vp1=[1,242],$Vq1=[38,58],$Vr1=[1,258],$Vs1=[1,257],$Vt1=[1,259],$Vu1=[1,273],$Vv1=[1,274],$Vw1=[1,277],$Vx1=[1,280],$Vy1=[1,284],$Vz1=[58,60,61],$VA1=[2,145],$VB1=[18,19,22,30,31,42,43,44,46,47,51,52,53,55,58,70],$VC1=[1,313];
var parser2 = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"Init":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"Imprimir":7,"DeclaracionVariable":8,"AsignacionVariable":9,";":10,"IfSt":11,"WhileSt":12,"DoWhileSt":13,"SwitchSt":14,"IncreDecre":15,"DefinicionTypes":16,"GraficarTs":17,"BREAK":18,"CONTINUE":19,"DeclaracionArreglos":20,"ForNormal":21,"ID":22,"(":23,"ListaExpr":24,")":25,"Funcion":26,"AsigIndividual":27,"=":28,"Expr":29,"RETURN":30,"FUNCTION":31,"ListaParametros":32,":":33,"TiposFuncion":34,"StatementFuncion":35,"ElementoDeclaracion":36,"ListaParametrosPrima":37,",":38,"TipoNormal":39,"TIPOVOID":40,"TIPOARRAY":41,"CONSOLELOG":42,"GRAFICAR_TS":43,"LET":44,"ListaDeclaraciones":45,"CONST":46,"IF":47,"Statement":48,"ElseSt":49,"ELSE":50,"WHILE":51,"DO":52,"FOR":53,"OpcAsignacion":54,"SWITCH":55,"{":56,"ListaCasos":57,"}":58,"Caso":59,"CASE":60,"DEFAULT":61,"++":62,"--":63,"ListaValoresTipo":64,"NULL":65,"ValorType":66,"TIPOSTRING":67,"TIPOBOOLEAN":68,"TIPONUMBER":69,"TYPE":70,"ListaDefiniciones":71,"DefinicionAtributo":72,"ListaDimensiones":73,"[":74,"ValoresArreglo":75,"]":76,"Tipos":77,"ValorArreglo":78,"+":79,"-":80,"*":81,"/":82,"**":83,"%":84,"||":85,"&&":86,"!":87,">=":88,"<=":89,">":90,"<":91,"==":92,"!=":93,"F":94,"DECIMAL":95,"NUMBER":96,"STRING":97,"STRING2":98,"STRING3":99,"TRUE":100,"FALSE":101,"NuevoAcceso":102,"?":103,"Accesos":104,"Acceso":105,"FuncionArreglo":106,".":107,"POP":108,"PUSH":109,"LENGTH":110,"InstruccionesFuncion":111,"InstruccionFuncion":112,"InstruccionesFuncionPrima":113,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:";",18:"BREAK",19:"CONTINUE",22:"ID",23:"(",25:")",28:"=",30:"RETURN",31:"FUNCTION",33:":",38:",",40:"TIPOVOID",41:"TIPOARRAY",42:"CONSOLELOG",43:"GRAFICAR_TS",44:"LET",46:"CONST",47:"IF",50:"ELSE",51:"WHILE",52:"DO",53:"FOR",55:"SWITCH",56:"{",58:"}",60:"CASE",61:"DEFAULT",62:"++",63:"--",65:"NULL",67:"TIPOSTRING",68:"TIPOBOOLEAN",69:"TIPONUMBER",70:"TYPE",74:"[",76:"]",79:"+",80:"-",81:"*",82:"/",83:"**",84:"%",85:"||",86:"&&",87:"!",88:">=",89:"<=",90:">",91:"<",92:"==",93:"!=",95:"DECIMAL",96:"NUMBER",97:"STRING",98:"STRING2",99:"STRING3",100:"TRUE",101:"FALSE",103:"?",107:".",108:"POP",109:"PUSH",110:"LENGTH"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,5],[6,4],[6,1],[6,4],[6,3],[26,8],[26,6],[26,7],[26,5],[32,2],[37,3],[37,0],[34,1],[34,1],[34,1],[34,1],[7,5],[17,3],[8,3],[8,3],[9,3],[11,6],[49,2],[49,2],[49,0],[12,5],[13,7],[21,8],[54,1],[54,1],[14,7],[57,2],[57,1],[59,4],[59,3],[59,4],[59,3],[15,2],[15,2],[48,3],[48,2],[45,3],[45,1],[36,5],[36,3],[36,3],[36,1],[36,3],[36,7],[36,5],[64,3],[64,1],[66,3],[66,5],[39,1],[39,1],[39,1],[16,6],[71,3],[71,1],[72,3],[72,3],[20,5],[20,5],[20,4],[20,1],[73,3],[73,6],[75,3],[75,1],[78,3],[78,3],[24,3],[24,1],[77,1],[77,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,2],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,1],[94,3],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,1],[94,4],[94,3],[94,5],[102,1],[102,1],[102,2],[105,1],[104,3],[104,4],[104,5],[104,3],[104,5],[104,4],[106,3],[106,4],[106,1],[27,4],[27,4],[35,3],[35,2],[111,2],[113,2],[113,0],[112,1],[112,1],[112,2],[112,1],[112,1],[112,1],[112,1],[112,2],[112,2],[112,2],[112,2],[112,2],[112,2],[112,1],[112,5],[112,4],[112,1],[112,4],[112,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 2:

        this.$ = new Nodo("Instrucciones");
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 3:

        this.$ = new Nodo("Instrucciones",0);
        this.$.add($$[$0]);
    
break;
case 4: case 5: case 7: case 8: case 9: case 10: case 20: case 146: case 147: case 149: case 150: case 151: case 152: case 162:

        this.$ = new Nodo("Instruccion",0);
        this.$.add($$[$0]);
    
break;
case 6: case 12: case 148: case 153:

        this.$ = new Nodo("Instruccion",0);
        this.$.add($$[$0-1]);
    
break;
case 11:

        this.$= new Nodo("Instruccion",0);
        this.$.add($$[$0-1]);
    
break;
case 13: case 155:

        this.$ = new Nodo("GraficarTs",0);
    
break;
case 14: case 156:

        this.$ = new Nodo("Break",0);
    
break;
case 15: case 157:

        this.$ = new Nodo("Continue",0);
    
break;
case 16: case 158:

        this.$ = new Nodo("Decl. Arreglo",0);
        this.$.add($$[$0-1]);
    
break;
case 17: case 159:

        this.$ = new Nodo("For1",0);
        this.$.add($$[$0]);
    
break;
case 18: case 160:

        this.$ = new Nodo("Llamada",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-2]);
    
break;
case 19: case 161:

        this.$ = new Nodo("Llamada",0);
        this.$.add(new Nodo($$[$0-3],0));
    
break;
case 21: case 163:

        this.$ = new Nodo("Asig. Indiv.",0);
        this.$.add($$[$0-3]);
        this.$.add($$[$0-1]);
    
break;
case 22: case 164:

        this.$ = new Nodo("Return",0);
        this.$.add($$[$0-1]);
    
break;
case 23:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-6],0));
        this.$.add($$[$0-4]);
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 24:

        this.$ = new Nodo("Funcion",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 25:

        this.$ = new Nodo("Funcion",0);
        this.$.add(new Nodo($$[$0-5],0));
        this.$.add($$[$0-2]);
    
break;
case 26:

        this.$ = new Nodo("Funcion",0);
        this.$.add(new Nodo($$[$0-3],0));
        this.$.add($$[$0]);
    
break;
case 27:

        this.$ = new Nodo("Lista Par.",0);
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 28:

        this.$ = new Nodo("Lista Par. Prima",0);
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 29: case 42: case 145:

        this.$ = new Nodo("Epsilon",0);
    
break;
case 30:

        this.$ = new Nodo("Tipos Funcion",0);
        this.$.add($$[$0]);
    
break;
case 31:

        this.$ = new Nodo("Tipos Funcion",0);
        this.$.add(new Nodo("Void",0));
    
break;
case 32:

        this.$ = new Nodo("Tipos Funcion",0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 33:

        this.$ = new Nodo("Tipos Funcion",0);
        this.$.add(new Nodo("Array",0));
    
break;
case 34:
   
        this.$ = new Nodo("Imprimir",0);
        this.$.add($$[$0-2]);
    
break;
case 35:

        this.$ = new Nodo("Graficarts",0);
    
break;
case 36: case 37:

        this.$ = new Nodo("Decla. Var.",0);
        this.$.add($$[$0-1]);
    
break;
case 38:

        this.$ = new Nodo("Asig Var.",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add($$[$0]);
    
break;
case 39:

        this.$ = new Nodo("If",0);
        this.$.add($$[$0-3]);
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 40: case 41:

        this.$ = new Nodo("Else",0);
        this.$.add($$[$0]);
    
break;
case 43:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 44:

        this.$ = new Nodo("Do While",0);
        this.$.add($$[$0-5]);
        this.$.add($$[$0-2]);
    
break;
case 45:

        this.$ = new Nodo("For1",0);
        this.$.add($$[$0-5]);
        this.$.add($$[$0-4]);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 46: case 47:

        this.$ = new Nodo("Opc. asig",0);
        this.$.add($$[$0]);
    
break;
case 48:

        this.$ = new Nodo("Switch",0);
        this.$.add($$[$0-4]);
        this.$.add($$[$0-1]);
    
break;
case 49:

        this.$ = new Nodo("Lista Casos",0);
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 50:

        this.$ = new Nodo("Lista Casos",0);
        this.$.add($$[$0]);
    
break;
case 51: case 53:

        this.$ = new Nodo("Caso",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 52: case 54:

        this.$ = new Nodo("Caso",0);
        this.$.add(new Nodo("Default",0));
        this.$.add($$[$0]);
    
break;
case 55:
   
        this.$ = new Nodo("Incre Decre",0);
        this.$.add(new Nodo($$[$0-1],0));
        this.$.add(new Nodo("++",0));
    
break;
case 56:

        this.$ = new Nodo("Incre Decre",0);
        this.$.add(new Nodo($$[$0-1],0));
        this.$.add(new Nodo("--",0));
    
break;
case 57:

        this.$ = new Nodo("Statement",0);
        this.$.add($$[$0-1]);
    
break;
case 58:

        this.$ = new Nodo("Statement",0);
    
break;
case 59:

        this.$ = new Nodo("Lista Decla.",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 60:

        this.$ = new Nodo("Lista Decla.",0);
        this.$.add($$[$0]);
    
break;
case 61:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 62: case 63:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add($$[$0]);
    
break;
case 64:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 65:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add(new Nodo($$[$0],0));
        this.$.add($$[$02]);
    
break;
case 66:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-6],0));
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-1]);
    
break;
case 67:

        this.$ = new Nodo("Elem. Decla",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add(new Nodo("Null",0));
    
break;
case 68:

        this.$ = new Nodo("Lista Val. Tipo",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 69:

        this.$ = new Nodo("Lista Val. Tipo",0);
        this.$.add($$[$0]);
    
break;
case 70:

        this.$ = new Nodo("Valor Type",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add($$[$0]);
    
break;
case 71:

        this.$ = new Nodo("Valor Types",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-1]);
    
break;
case 72: case 73: case 74:

        this.$ = new Nodo("Tipo Normal",0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 75:

        this.$ = new Nodo("Def. Types",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-1]);
    
break;
case 76:

        this.$ = new Nodo("Lista Def.",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 77:

        this.$ = new Nodo("Lista Def.",0);
        this.$.add($$[$0]);
    
break;
case 78:

        this.$ = new Nodo("Def. Atributo",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add(new Nodo($$[$0],0));
    
break;
case 79:

        this.$ = new Nodo("Def. Atributo",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add($$[$0]);
    
break;
case 80: case 81:

        this.$ = new Nodo("Decla. Arreglos",0);
        this.$.add($$[$0-4]);
        this.$.add($$[$0-1]);
    
break;
case 82:

        this.$ = new Nodo("Decla. Arreglos",0);
        this.$.add($$[$0-3]);
    
break;
case 83:

        this.$ = new Nodo("Decla. Arreglos",0);
        this.$.add($$[$0]);
    
break;
case 84:
   
        this.$ = new Nodo("Lista Dim.",0);
        this.$.add($$[$0-2]);
    
break;
case 85:

        this.$ = new Nodo("Lista Dim.",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-2]);
    
break;
case 86:

        this.$ = new Nodo("Valores Arreglo",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
        
    
break;
case 87:

        this.$ = new Nodo("Valores Arreglo",0);
        this.$.add($$[$0]);
    
break;
case 88:

        this.$ = new Nodo("Valor Arreglo",0);
        this.$.add($$[$0-1]);
    
break;
case 89:
   
        this.$ = new Nodo("Valor Arreglo",0);
        this.$.add($$[$0-1]);
    
break;
case 90:

        this.$ = new Nodo("Lista Expr",0);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 91:

        this.$ = new Nodo("Lista Expr",0);
        this.$.add($$[$0]);
    
break;
case 92:

        this.$ = new Nodo("Tipos",0);
        this.$.add($$[$0]);
    
break;
case 93:

        this.$ = new Nodo("Tipos",0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 94:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("+",0));
        this.$.add($$[$0]);
    
break;
case 95:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("-",0));
        this.$.add($$[$0]);
    
break;
case 96:
 
        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("*",0));
        this.$.add($$[$0]);
    
break;
case 97:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("/",0));
        this.$.add($$[$0]);
    
break;
case 98:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("**",0));
        this.$.add($$[$0]);
    
break;
case 99:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("%",0));
        this.$.add($$[$0]);
    
break;
case 100:

        this.$ = new Nodo("E",0);
        this.$.add(new Nodo("-",0));
        this.$.add($$[$0]);
    
break;
case 101:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-1]);
        this.$.add(new Nodo("++",0));
    
break;
case 102:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-1]);
        this.$.add(new Nodo("--",0));
    
break;
case 103:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("||",0));
        this.$.add($$[$0]);
    
break;
case 104:
 
        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("&&",0));
        this.$.add($$[$0]);
    
break;
case 105:
 
        this.$ = new Nodo("E",0);
        this.$.add(new Nodo("!",0));
        this.$.add($$[$0]);
    
break;
case 106:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo(">=",0));
        this.$.add($$[$0]);
    
break;
case 107:
 
        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("<=",0));
        this.$.add($$[$0]);
    
break;
case 108:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo(">",0));
        this.$.add($$[$0]);
    
break;
case 109:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("<",0));
        this.$.add($$[$0]);
    
break;
case 110:

        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("==",0));
        this.$.add($$[$0]);
    
break;
case 111:
 
        this.$ = new Nodo("E",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo("!=",0));
        this.$.add($$[$0]);
    
break;
case 112:

        this.$ = new Nodo("F",0);
        this.$.add($$[$0]);
    
break;
case 113:
 
        this.$ = new Nodo("F", 0);
        this.$.add($$[$0-1]);
    
break;
case 114:
 
        this.$ = new Nodo("Decimal", 0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 115:
 
        this.$ = new Nodo("Numero", 0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 116: case 117: case 118:

        this.$ = new Nodo("String", 0);
        this.$.add(new Nodo($$[$0].slice(1,-1),0));
    
break;
case 119:

        this.$ = new Nodo("True", 0);
    
break;
case 120:

        this.$ = new Nodo("False", 0);
    
break;
case 121: case 126: case 127:

        this.$ = new Nodo("Nuevo Acceso",0);
        this.$.add($$[$0]);
    
break;
case 122:

        this.$ = new Nodo("Null",0);
    
break;
case 123:

        this.$ = new Nodo("Llamada",0);
        this.$.add(new Nodo($$[$0-3],0));
        this.$.add($$[$0-1]);
    
break;
case 124:

        this.$ = new Nodo("Llamada", 0);
        this.$.add(new Nodo($$[$0-2],0));
    
break;
case 125:

        this.$ = new Nodo("F",0);
        this.$.add($$[$0-4]);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 128:

        this.$ = new Nodo("Nuevo Acceso",0);
        this.$.add(new Nodo($$[$0-1],0));
        this.$.add($$[$0]);
    
break;
case 129:

        this.$ = new Nodo("Acceso",0);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 130:

        this.$ = new Nodo("Accesos",0);
        this.$.add($$[$0-2]);
        this.$.add(new Nodo($$[$0],0));
    
break;
case 131:

        this.$ = new Nodo("Accesos",0);
        this.$.add($$[$0-3]);
        this.$.add($$[$0-1]);
    
break;
case 132:

        this.$ = new Nodo("Accesos",0);
        this.$.add($$[$0-4]);
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 133:

        this.$ = new Nodo("Accesos",0);
        this.$.add(new Nodo($$[$0-2],0));
        this.$.add(new Nodo($$[$0],0));
    
break;
case 134:

        this.$ = new Nodo("Accesos",0);
        this.$.add(new Nodo($$[$0-4],0));
        this.$.add($$[$0-2]);
        this.$.add($$[$0]);
    
break;
case 135:

        this.$ = new Nodo("Accesos",0);
        this.$.add(new Nodo($$[$0-3],0));
        this.$.add($$[$0-1]);
    
break;
case 136:

        this.$ = new Nodo("Pop",0);
    
break;
case 137:

        this.$ = new Nodo("Push",0);
        this.$.add($$[$0-1]);
    
break;
case 138:

        this.$ = new Nodo("Length",0);
    
break;
case 139: case 140:

        this.$ = new Nodo("Asg. Ind.",0);
        this.$.add($$[$0-3]);
        this.$.add($$[$0-1]);
    
break;
case 141:

        this.$ = new Nodo("Statement Func.",0);
        this.$.add($$[$0-1]);
    
break;
case 142:

       // this.$ = new Statement(new Array(), _$[$0-1].first_line, _$[$0-1].first_column);
       this.$ = new Nodo("Epsilon",0);
    
break;
case 143:

        this.$ = new Nodo("Inst. Funcion");
        this.$.add($$[$0-1]);
        this.$.add($$[$0]);
    
break;
case 144:

        this.$ = new Nodo("Instr. Funcion Prima",0);
        this.$.add($$[$0-1]); 
        this.$.add($$[$0]);
    
break;
case 154:

        this.$ = new Nodo("Definicion Type",0);
        this.$.add($$[$0-1]);
    
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,70:$Ve,73:31},{1:[3]},{5:[1,34],6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,70:$Ve,73:31},o($Vf,[2,3]),o($Vf,[2,4]),o($Vf,[2,5]),{10:[1,36]},o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{10:[1,37]},{10:[1,38]},{10:[1,39]},{10:[1,40]},{10:[1,41]},{10:[1,42]},o($Vf,[2,17]),{23:[1,43],28:$Vg,62:$Vh,63:$Vi,74:$Vj},o($Vf,[2,20]),{28:[1,48],74:$Vk},{22:$Vl,23:$Vm,29:50,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{23:[1,67]},{22:[1,69],36:70,45:68},{22:$Vx,36:70,45:71},{23:[1,73]},{23:[1,74]},{48:75,56:$Vy},{23:[1,77]},{22:[1,78]},{23:[1,79]},{10:[2,83],28:[1,80],74:[1,81]},{23:[1,82]},{22:[1,83]},{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,6]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),{22:$Vl,23:$Vm,24:84,25:[1,85],29:86,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:87,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($Vz,[2,55]),o($Vz,[2,56]),{22:$Vl,23:$Vm,29:88,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:89,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:90,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{10:[1,91],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{22:$Vl,23:$Vm,29:109,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:110,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($VR,[2,112]),{22:$Vl,23:$Vm,29:111,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($VR,[2,114]),o($VR,[2,115]),o($VR,[2,116]),o($VR,[2,117]),o($VR,[2,118]),o($VR,[2,119]),o($VR,[2,120]),o($VR,[2,121]),o($VR,[2,122]),o($VR,[2,129],{106:113,23:[1,112],74:[1,115],107:[1,114],108:$VS,109:$VT,110:$VU}),o($VR,[2,126],{74:[1,120],107:[1,119]}),o($VR,[2,127]),{22:$Vl,23:$Vm,29:121,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{10:[1,122],38:$VV},o($VW,$VX,{28:$VY,33:[1,124]}),o($VW,[2,60]),{10:[1,126],38:$VV},o($VZ,$VX,{28:$VY,33:[1,127]}),{22:$Vl,23:$Vm,29:128,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:129,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{51:[1,130]},{4:131,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,58:[1,132],70:$Ve,73:31},{22:$Vl,23:$Vm,29:133,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{28:[1,134]},{25:[1,135]},{74:[1,136]},{76:[1,137]},{8:138,44:[1,139],46:$V8},{23:[1,140]},{25:[1,141],38:$V_},{10:[1,143]},o($V$,[2,91],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),o($Vz,[2,38],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),{62:$VA,63:$VB,76:[1,144],79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{10:[1,145],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{62:$VA,63:$VB,76:[1,146],79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},o($Vf,[2,22]),{22:$Vl,23:$Vm,29:147,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:148,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:149,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:150,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:151,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:152,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($VR,[2,101]),o($VR,[2,102]),{22:$Vl,23:$Vm,29:153,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:154,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:155,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:156,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:157,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:158,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:159,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:160,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:161,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($V01,[2,100],{62:$VA,63:$VB,81:$VE,82:$VF,83:$VG,84:$VH}),o($V11,[2,105],{62:$VA,63:$VB,83:$VG}),{25:[1,162],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{22:$Vl,23:$Vm,24:163,25:[1,164],29:86,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($VR,[2,128]),{22:[1,165]},{22:$Vl,23:$Vm,29:166,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{23:[1,167]},{23:[1,168]},o($V21,[2,138]),{22:[1,169]},{22:$Vl,23:$Vm,29:170,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{25:[1,171],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},o($V31,[2,36]),{22:$Vx,36:172},{22:[1,175],39:174,67:$V41,68:$V51,69:$V61,77:173},{22:$Vl,23:$Vm,29:179,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($V31,[2,37]),{22:[1,181],39:180,67:$V41,68:$V51,69:$V61},{25:[1,182],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{25:[1,183],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{23:[1,184]},{6:35,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,58:[1,185],70:$Ve,73:31},o($V71,[2,58]),{25:[1,186],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{56:[1,187]},{10:[2,35]},{22:$Vl,23:$Vm,24:189,29:86,65:$Vn,74:$V81,75:188,76:[1,190],78:191,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($V91,[2,84]),{22:$Vl,23:$Vm,29:193,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vx,36:70,45:68},{22:$Vx,25:[1,195],32:194,36:196},{10:[1,197]},{22:$Vl,23:$Vm,29:198,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($Vf,[2,19]),o($Va1,[2,140]),o($Vf,[2,21]),o($Va1,[2,139]),o($V01,[2,94],{62:$VA,63:$VB,81:$VE,82:$VF,83:$VG,84:$VH}),o($V01,[2,95],{62:$VA,63:$VB,81:$VE,82:$VF,83:$VG,84:$VH}),o($V11,[2,96],{62:$VA,63:$VB,83:$VG}),o($V11,[2,97],{62:$VA,63:$VB,83:$VG}),o($V11,[2,98],{62:$VA,63:$VB,83:$VG}),o($V11,[2,99],{62:$VA,63:$VB,83:$VG}),o([10,25,33,38,58,76,85,103],[2,103],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o([10,25,33,38,58,76,85,86,103],[2,104],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($Vb1,[2,106],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH}),o($Vb1,[2,107],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH}),o($Vb1,[2,108],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH}),o($Vb1,[2,109],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH}),o($Vc1,[2,110],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,88:$VK,89:$VL,90:$VM,91:$VN}),o($Vc1,[2,111],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,88:$VK,89:$VL,90:$VM,91:$VN}),{33:[1,199],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},o($VR,[2,113]),{25:[1,200],38:$V_},o($VR,[2,124]),o($V21,[2,133]),{62:$VA,63:$VB,76:[1,201],79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{25:[1,202]},{22:$Vl,23:$Vm,29:203,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($V21,[2,130]),{62:$VA,63:$VB,76:[1,204],79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{10:[1,205]},o($VW,[2,59]),{74:[1,206]},o($VW,$Vd1,{28:$Ve1,74:[2,92]}),o($VW,$Vf1,{28:$Vg1,74:[2,93]}),o($Vh1,[2,72]),o($Vh1,[2,73]),o($Vh1,[2,74]),o($VZ,[2,63],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),o($VZ,$Vd1,{28:$Ve1}),o($VZ,$Vf1,{28:$Vg1}),{48:209,56:$Vy},{48:210,56:$Vy},{22:$Vl,23:$Vm,29:211,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($V71,[2,57]),{56:[1,212]},{22:$Vi1,71:213,72:214},{38:$Vj1,76:[1,216]},{38:$V_,76:[1,218]},{10:[2,82]},o($Vk1,[2,87]),{22:$Vl,23:$Vm,24:219,29:86,65:$Vn,74:$V81,75:220,78:191,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{10:[1,221],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{25:[1,222]},{33:[1,223],35:224,56:$Vl1},{25:$Vm1,37:226,38:$Vn1},o($Vf,[2,18]),o($V$,[2,90],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),{22:$Vl,23:$Vm,29:228,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},o($VR,[2,123]),o($V21,[2,135],{106:229,108:$VS,109:$VT,110:$VU}),o($V21,[2,136]),{25:[1,230],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},o($V21,[2,131],{106:231,108:$VS,109:$VT,110:$VU}),o($Vf,[2,34]),{76:[1,232]},{22:$Vl,23:$Vm,29:233,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{56:[1,234],65:[1,235]},o($Vf,[2,42],{49:236,50:[1,237]}),o($Vf,[2,43]),{25:[1,238],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{57:239,59:240,60:$Vo1,61:$Vp1},{38:[1,244],58:[1,243]},o($Vq1,[2,77]),{33:[1,245]},{10:[2,80]},{74:$V81,78:246},{10:[2,81]},{38:$V_,76:[1,247]},{38:$Vj1,76:[1,248]},{9:250,15:251,22:[1,252],54:249},{33:[1,253],35:254,56:$Vl1},{22:$Vr1,34:255,39:256,40:$Vs1,41:$Vt1,67:$V41,68:$V51,69:$V61},o($Vf,[2,26]),{7:263,8:264,9:265,11:266,12:267,13:268,14:269,15:270,16:271,17:272,18:$Vu1,19:$Vv1,20:275,21:276,22:$Vw1,26:278,27:279,30:$Vx1,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,58:[1,261],70:$Ve,73:31,111:260,112:262},{25:[2,27]},{22:$Vx,36:281},o([10,25,33,38,58,76,103],[2,125],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP}),o($V21,[2,134]),o($V21,[2,137]),o($V21,[2,132]),o($V91,[2,85]),o($VZ,[2,61],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),{22:$Vy1,64:282,66:283},o($VZ,[2,67]),o($Vf,[2,39]),{11:286,47:$V9,48:285,56:$Vy},{10:[1,287]},{58:[1,288],59:289,60:$Vo1,61:$Vp1},o($Vz1,[2,50]),{22:$Vl,23:$Vm,29:290,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{33:[1,291]},{10:[2,75]},{22:$Vi1,72:292},{22:[1,293],39:294,67:$V41,68:$V51,69:$V61},o($Vk1,[2,86]),o($Vk1,[2,88]),o($Vk1,[2,89]),{25:[1,295]},{25:[2,46]},{25:[2,47]},{28:$Vg,62:$Vh,63:$Vi},{22:$Vr1,34:296,39:256,40:$Vs1,41:$Vt1,67:$V41,68:$V51,69:$V61},o($Vf,[2,24]),{35:297,56:$Vl1},{56:[2,30]},{56:[2,31]},{56:[2,32]},{56:[2,33]},{58:[1,298]},o($Vf,[2,142]),{7:263,8:264,9:265,11:266,12:267,13:268,14:269,15:270,16:271,17:272,18:$Vu1,19:$Vv1,20:275,21:276,22:$Vw1,26:278,27:279,30:$Vx1,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,58:$VA1,70:$Ve,73:31,112:300,113:299},o($VB1,[2,146]),o($VB1,[2,147]),{10:[1,301]},o($VB1,[2,149]),o($VB1,[2,150]),o($VB1,[2,151]),o($VB1,[2,152]),{10:[1,302]},{10:[1,303]},{10:[1,304]},{10:[1,305]},{10:[1,306]},{10:[1,307]},o($VB1,[2,159]),{23:[1,308],28:$Vg,62:$Vh,63:$Vi,74:$Vj},o($VB1,[2,162]),{28:[1,309],74:$Vk},{22:$Vl,23:$Vm,29:310,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{25:$Vm1,37:311,38:$Vn1},{38:$VC1,58:[1,312]},o($Vq1,[2,69]),{33:[1,314]},o($Vf,[2,40]),o($Vf,[2,41]),o($Vf,[2,44]),o($Vf,[2,48]),o($Vz1,[2,49]),{33:[1,315],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{4:317,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,48:316,51:$Va,52:$Vb,53:$Vc,55:$Vd,56:$Vy,70:$Ve,73:31},o($Vq1,[2,76]),o($Vq1,[2,78]),o($Vq1,[2,79]),{48:318,56:$Vy},{35:319,56:$Vl1},o($Vf,[2,25]),o($Vf,[2,141]),{58:[2,143]},{7:263,8:264,9:265,11:266,12:267,13:268,14:269,15:270,16:271,17:272,18:$Vu1,19:$Vv1,20:275,21:276,22:$Vw1,26:278,27:279,30:$Vx1,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,58:$VA1,70:$Ve,73:31,112:300,113:320},o($VB1,[2,148]),o($VB1,[2,153]),o($VB1,[2,154]),o($VB1,[2,155]),o($VB1,[2,156]),o($VB1,[2,157]),o($VB1,[2,158]),{22:$Vl,23:$Vm,24:321,25:[1,322],29:86,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{22:$Vl,23:$Vm,29:323,65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{10:[1,324],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},{25:[2,28]},o($VZ,[2,66]),{22:$Vy1,66:325},{22:$Vl,23:$Vm,29:326,56:[1,327],65:$Vn,80:$Vo,87:$Vp,94:53,95:$Vq,96:$Vr,97:$Vs,98:$Vt,99:$Vu,100:$Vv,101:$Vw,102:62,104:65,105:66},{4:329,6:3,7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:$V0,19:$V1,20:16,21:17,22:$V2,26:19,27:20,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,48:328,51:$Va,52:$Vb,53:$Vc,55:$Vd,56:$Vy,70:$Ve,73:31},o($Vz1,[2,52]),o($Vz1,[2,54],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,26:19,27:20,73:31,6:35,18:$V0,19:$V1,22:$V2,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,70:$Ve}),o($Vf,[2,45]),o($Vf,[2,23]),{58:[2,144]},{25:[1,330],38:$V_},{10:[1,331]},{10:[1,332],62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ},o($VB1,[2,164]),o($Vq1,[2,68]),o($Vq1,[2,70],{62:$VA,63:$VB,79:$VC,80:$VD,81:$VE,82:$VF,83:$VG,84:$VH,85:$VI,86:$VJ,88:$VK,89:$VL,90:$VM,91:$VN,92:$VO,93:$VP,103:$VQ}),{22:$Vy1,64:333,66:283},o($Vz1,[2,51]),o($Vz1,[2,53],{7:4,8:5,9:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,20:16,21:17,26:19,27:20,73:31,6:35,18:$V0,19:$V1,22:$V2,30:$V3,31:$V4,42:$V5,43:$V6,44:$V7,46:$V8,47:$V9,51:$Va,52:$Vb,53:$Vc,55:$Vd,70:$Ve}),{10:[1,334]},o($VB1,[2,161]),o($VB1,[2,163]),{38:$VC1,58:[1,335]},o($VB1,[2,160]),o($Vq1,[2,71])],
defaultActions: {34:[2,1],135:[2,35],190:[2,82],216:[2,80],218:[2,81],226:[2,27],243:[2,75],250:[2,46],251:[2,47],256:[2,30],257:[2,31],258:[2,32],259:[2,33],299:[2,143],311:[2,28],320:[2,144]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser2 = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const { Nodo } = require('../Arbol/Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser2) {
            this.yy.parser2.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */ 
break;
case 1://console.log("imprime comentario "+yy_.yytext);
break;
case 2://console.log("imprime comentario Multilinea"+yy_.yytext);
break;
case 3:return 95
break;
case 4:return 96
break;
case 5:return 97
break;
case 6:return 98
break;
case 7:return 99
break;
case 8:return 83
break;
case 9:return 81
break;
case 10:return 82
break;
case 11:return 10
break;
case 12:return 38
break;
case 13:return 62
break;
case 14:return 63
break;
case 15:return 80
break;
case 16:return 79
break;
case 17:return '^'
break;
case 18:return 84
break;
case 19:return 89
break;
case 20:return 88
break;
case 21:return 91
break;
case 22:return 90
break;
case 23:return 92
break;
case 24:return 93
break;
case 25:return 85
break;
case 26:return 86
break;
case 27:return 87
break;
case 28:return 103
break;
case 29:return 28
break;
case 30:return 23
break;
case 31:return 25 
break;
case 32:return 56
break;
case 33:return 58
break;
case 34:return 74
break;
case 35:return 76
break;
case 36:return 33
break;
case 37:return 47
break;
case 38:return 50
break;
case 39:return 51
break;
case 40:return 100
break;
case 41:return 101
break;
case 42:return 42
break;
case 43:return 43
break;
case 44:return 52
break;
case 45:return 44
break;
case 46:return 46
break;
case 47:return 69
break;
case 48:return 67
break;
case 49:return 68
break;
case 50:return 55
break;
case 51:return 60
break;
case 52:return 61
break;
case 53:return 70
break;
case 54:return 65
break;
case 55:return 18
break;
case 56:return 19
break;
case 57:return 53
break;
case 58:return 31
break;
case 59:return "TIPOVOID"
break;
case 60:return "RETURN"  
break;
case 61:return 109
break;
case 62:return 108
break;
case 63:return 110
break;
case 64:return 107
break;
case 65:return 22;
break;
case 66:return 5
break;
case 67: 
    //cuadro_texto.errores_sintacticos_lexicos='Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column+'\n'; 
    
    //console.log(error);

break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/([^\n])*([\n]|$))/,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:(([0-9]+)\.([0-9]+)))/,/^(?:([0-9]+))/,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/,/^(?:(('((\\([\'\"\\bfnrtv]))|([^\'\\]+))*')))/,/^(?:((`((\\([\'\"\\bfnrtv]))|([^`\\]+))*`)))/,/^(?:\*\*)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:,)/,/^(?:\+\+)/,/^(?:--)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:<=)/,/^(?:>=)/,/^(?:<)/,/^(?:>)/,/^(?:==)/,/^(?:!=)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:=)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:console\.log\b)/,/^(?:graficar_ts\b)/,/^(?:do\b)/,/^(?:let\b)/,/^(?:const\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:switch\b)/,/^(?:case\b)/,/^(?:default\b)/,/^(?:type\b)/,/^(?:null\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:for\b)/,/^(?:function\b)/,/^(?:void\b)/,/^(?:return\b)/,/^(?:\.push\b)/,/^(?:\.pop\b)/,/^(?:\.length\b)/,/^(?:\.)/,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67],"inclusive":true}}
});
return lexer;
})();
parser2.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser2;parser2.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser2 = Grammar2;
exports.Parser = Grammar2.Parser;
exports.parse = function () { return Grammar2.parse.apply(Grammar2, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser2.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}